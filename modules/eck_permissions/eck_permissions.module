<?php

function eck_permissions_menu(){
  $menu = array();
  
  $menu['admin/people/eck-permissions'] =
  array(
    'title' => "ECK Permissions",
    'page callback' => "eck_permissions",
    'access callback' => TRUE,
    'type' => MENU_LOCAL_TASK
  );
  
  return $menu;
}

function eck_permissions(){
  return drupal_get_form("eck_permissions_form");
}

function eck_permissions_form($form, &$state){
  
  $form['user_role'] =
  array(
    '#type' => 'textfield',
    '#title' => t('User / Role'),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  );
  
  $form['permission'] =
  array(
    '#type' => 'textfield',
    '#title' => t('Permission'),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  );
  
  $form['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  
  return $form;
}

function eck_permissions_form_submit($form, &$state){
  $values = $state['values'];
  $user_role = $values['user_role'];
  $pieces = explode(":", $user_role);
  
  $permission = $values['permission'];
  
  $perm = new ECKPermission();
  $perm->type = $pieces[0];
  $perm->oid = $pieces[1];
  $perm->permission = $permission;
  $perm->save();
}

class ECKPermission extends DBObject{
  public function __construct(){
    parent::__construct('eck_permissions');
    $this->config = array();
  }
  
  public static function loadById($id){
    $self = new ECKPermission();
    $self->load('id', $id);
    return $self;
  }
  
  public static function loadAllByRole($rid){
    //@todo move this to a general function
    $results = db_select('eck_permissions', 'p')
    ->fields('p', array('id'))
    ->condition("type", "role", "=")
    ->condition("oid", $rid, "=")
    ->execute();
    
    $perms = array();
    
    foreach($results as $result){
      $id = $result->id;
      $perms[] = ECKPermission::loadById($id);
    }
    return $perms;
  }
  
  public static function loadAllByUID($uid){
    //@todo move this to a general function
    $results = db_select('eck_permissions', 'p')
    ->fields('p', array('id'))
    ->condition("type", "user", "=")
    ->condition("oid", $uid, "=")
    ->execute();
    
    $perms = array();
    
    foreach($results as $result){
      $id = $result->id;
      $perms[] = ECKPermission::loadById($id);
    }
    return $perms;
  }
}

function eck_permissions_eck_access($op, $object_type, $object, $account){
  $allow = FALSE;
  
  //we are only dealing with object specific permissions, general permission are
  //handled by eck
  if(isset($object)){
    $roles = $account->roles;
    $perms = array();

    //first we want the user specific permissions
    $new = ECKPermission::loadAllByUID($account->uid);
    $perms = array_merge($perms, $new);
    
    foreach($roles as $rid => $role){
      $new = ECKPermission::loadAllByRole($rid);
      $perms = array_merge($perms, $new);
    }

    
    foreach($perms as $p){
      $perm = $p->permission;
      $object_id = eck_permissions_object_id($object_type, $object);
      
      $cperm = "{$op} {$object_type}:{$object_id}";
      if(strcmp($perm, $cperm) == 0){
        $allow = TRUE;
      }
      
      //we also want to deal with general options of permissions
      $pieces = explode("|", $object_id);
      
      //how many possible permissions can be generated
      $binary_string = "";
      for($i = 0; $i < count($pieces); $i++){
        $binary_string .= 1;
      }
      
      $total_permissions = bindec($binary_string);
      
      for($i = 0; $i <= $total_permissions; $i++){
        
        $binary = decbin($i);
        $binary = strrev($binary);
        $pc = $pieces;
        
        for($j = 0; $j < count($pieces); $j++){
          $bit = substr($binary, $j, 1);
          if($bit == 1){
            $pc[$j] = "*";
          }
        }
        
        $new_object_id = implode("|", $pc);
        
        $cperm = "{$op} {$object_type}:{$new_object_id}";
        if(strcmp($perm, $cperm) == 0){
          $allow = TRUE;
        }
      }
    }
    
    //should behaviors care about anything but entity permissions?
    //I guess we'll play it by ear
    if($object_type == "entity"){
      
      $entity_type_name = $object->entityType();
      $entity_type = EntityType::loadByName($entity_type_name);
      $behavior_access = eck_property_behavior_invoke_plugin($entity_type, 
        'permissions', array('op' => $op, 'entity' => $object, 'permissions' => $perms, 
        'account' => $account)); 
      
      foreach($behavior_access as $access){
        if($access){
          $allow = TRUE;
        }
      }
    }
  }

  return array($allow);
}

function eck_permissions_object_id($object_type, $object){
  if($object_type == "entity_type"){
    return $object->name;
  }else if($object_type == "bundle"){
    return "{$object->entity_type}|{$object->name}";
  }else if($object_type == "entity"){
    return "{$object->entityType()}|{$object->type}|{$object->id}";
  }
}
