<?php
/**
 * Implements hook_boot()
 */
function eck_boot(){
  //include composer's class autoloader
  $file_path = __DIR__."/vendor/autoload.php";
  require_once $file_path;
}

/**
 * Implements hook_menu()
 */
function eck_menu() {
  
  $menu = array();
  
  $clusters = eck_get_web_ui_menu_cluster_info();
  foreach($clusters as $cluster){
    $menu_cluster = new \ECK\UI\Web\MenuCluster($cluster['base_path'], $cluster['object_type']);
    foreach($cluster['operations'] as $config){
      $menu_cluster->addOperation($config);
    }
    $menu += $menu_cluster->generateMenuItems();
  }
  
  /*//Properties
  $menu_item = new \ECK\UI\Web\MenuItem('entity-type/%eckentitytype/property', 'listing', 'property');
  $menu += $menu_item->build();
  
  $menu['entity-type/%eckentitytype/property/listing'] = array(
    'title' => "List",
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  
  $menu_item = new \ECK\UI\Web\MenuItem('entity-type/%eckentitytype/property/add', 'create', 'property');
  $menu += $menu_item->build();
  
  $menu_item = new \ECK\UI\Web\MenuItem('entity-type/%eckentitytype/property/%eckproperty/edit', 'update', 'property');
  $menu += $menu_item->build();
  
  $menu_item = new \ECK\UI\Web\MenuItem('entity-type/%eckentitytype/property/%eckproperty/delete', 'delete', 'property');
  $menu += $menu_item->build();
  
  //Widget
  $menu_item = new \ECK\UI\Web\MenuItem('entity-type/%eckentitytype/property/%eckproperty/widget/add', 'create', 'widget');
  $menu += $menu_item->build();
  
  //Entities
  $menu_item = new \ECK\UI\Web\MenuItem('entity-type/%eckentitytype/entity', 'listing', 'entity');
  $menu += $menu_item->build();
  
  $menu['entity-type/%eckentitytype/entity/listing'] = array(
    'title' => "List",
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  
  $menu_item = new \ECK\UI\Web\MenuItem('entity-type/%eckentitytype/entity/add', 'create', 'entity');
  $menu += $menu_item->build();
  
  $menu_item = new \ECK\UI\Web\MenuItem('entity-type/%eckentitytype/entity/%eckentity/edit', 'update', 'entity');
  $menu += $menu_item->build();
  
  $menu_item = new \ECK\UI\Web\MenuItem('entity-type/%eckentitytype/entity/%eckentity/delete', 'delete', 'entity');
  $menu += $menu_item->build();*/
  
  //Permissions
  $menu['admin/people/eck-permissions'] =
  array(
    'title' => "ECK Permissions",
    'page callback' => "eck_permissions",
    'access arguments' => array('manage eck permissions'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'eck.permissions.inc'
  );
  
  $menu['admin/people/eck-permissions/%/%'] =
  array(
    'title' => "ECK Permissions",
    'page callback' => "eck_permissions",
    'page arguments' => array(3, 4),
    'access arguments' => array('manage eck permissions'),
    'file' => 'eck.permissions.inc'
  );
  
  $menu['admin/people/eck-permissions/%/%/delete/%'] =
  array(
    'title' => "ECK Permissions",
    'page callback' => "drupal_get_form",
    'page arguments' => array('eck_permissions_delete_form', 6),
    'access arguments' => array('manage eck permissions'),
    'file' => 'eck.permissions.inc'
  );
  
  return $menu;
}

function eckentitytype_load($name){
  return "entity_type:{$name}";
}

function eckproperty_load($name){
  return "property:{$name}";
}

function eckentity_load($id){
  return "entity:{$id}";
}

function eck_pages(){
  //here is the input from the user
  $args = func_get_args();
  //the sytem will take an interface and the input from the user
  $system = new \ECK\Core\System(new ECK\UI\Web\WebInterface(), $args);
  //and then we tell it to do things
  return $system->doThings();
}
  
function eck_alphabetical_cmp( $a, $b )
{ 
  return strcasecmp($a->getName(), $b->getName());
} 

function _eck_fake_exists() {
  return FALSE;
}

/**
 * Implements hook_entity_info().
 *
 * The Entity information for all the entity types created with eck.
 */
function eck_entity_info() {
  $info = array();

  // Get all the names of all the entity types from the eck table
  // for each of the created entity types add its info to the $info array.
  foreach (\ECK\Core\EntityType::loadAll() as $entity_type) {
    
    $entity_type_label = $entity_type->getLabel();

    $entity_class = "ECK\Core\EEntity";
    $controller_class = "EntityAPIController";


    $info[$entity_type->getName()] = array(
      'label' => t($entity_type_label),
      'base table' => "eck_{$entity_type->getName()}",
      'entity class' => $entity_class,
      'controller class' => $controller_class,
      //'access callback' => 'eck_entity_access',
      //'form callback' => 'eck__entity__form',
      'module' => 'eck',
      //'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        //'bundle' => 'type'
      ),
      'label callback' => 'eck__entity__label',
      'uri callback' => 'eck__entity__uri',
      // Bundles are defined by the entity types below.
      'bundles' => array(),
      // Bundle keys tell the FieldAPI how to extract information from the bundle objects.
      /*'bundle keys' => array(
        'bundle' => 'type'
      ),*/
      // I guess we need at least one view mode for entity_view_modes (the module) to work.
      'view modes' => array(
        'teaser' => array(
            'label' => t('Teaser'),
            'custom settings' => TRUE,
        )
      ),
      // Inline entity form module integration.
      //'inline entity form' => array('controller' => 'EckInlineEntityFormController'),
    );

    /*$eck_path = eck__entity_type__path();
    foreach (Bundle::loadByEntityType($entity_type) as $bundle) {
      $bundle_label = $bundle->label;
      $path = "{$eck_path}/{$entity_type->name}/{$bundle->name}";

      $info[$entity_type->name]['bundles'][$bundle->name] = array(
        'label' => $bundle_label,
        'admin' => array(
          'path' => $path,
          'access callback' => 'eck_access',
          'access arguments' => 
           array('update', 'bundle')
        ),
        'crud' =>
        array(
          'add' => 
          array(
            'path' => $path."/add", 
          ),
          'edit' => 
          array(
            'path' => $path."/%eckentity/edit",
            'entity_id' => 5
          ),
          'delete' => 
          array(
            'path' => $path."/%eckentity/delete",
            'entity_id' => 5
          ),
          'view' => 
          array(
            'path' => "{$entity_type->name}/{$bundle->name}/%eckentity",
            'entity_id' => 2
          )
        )
      );
    }*/
  }

  return $info;
}

/**
 * This is the callback function for an entities label
 * By default the label is the id of the entity, but a number of
 * hooks are defined to customize the label if needed
 *
 * @param $entity
 *  an object as returned by entity_load()
 */
 function eck__entity__label($entity) {
  $hook_names = array(
    "eck_entity_label",
    "eck_entity_{$entity->entityType()}_label",
    "eck_entity_{$entity->entityType()}_{$entity->type}_label",
  );

  foreach ($hook_names as $hook_name) {
    $new_label = module_invoke_all($hook_name, $entity, $entity->id);
    $empty = empty($new_label);
    if (!$empty) {
      break;
    }
  }

  if (!$empty) {
    return $new_label[0];
  }
  else {
    return $entity->id;
  }
}

/**
 * Entity URI callback
 *
 * @param $entity
 *  an object as returned by entity_load()
 */
function eck__entity__uri($entity) {
  
  /*$ids = entity_extract_ids($entity->entityType(), $entity);

  module_load_include('inc', 'eck', 'eck.entity');
  $crud_info = get_bundle_crud_info($entity->entityType(), $entity->type);
  $view_path = str_replace('%eckentity', $ids[0], $crud_info['view']['path']);*/
  
  return array('path' => "{$entity->entityType()}/{$entity->id}/view");
}

function eck_schema_alter(&$schema){
  
  if (db_table_exists('eck_entity_type')) {
   
    // When something requests an entity's info, the hook_schema is called to
    // get the information about the entity's table, so we need to provide that
    // information in the hook.

    // Get all the entity types that have been create (all the rows in eck_entity_type table).
    foreach (\ECK\Core\EntityType::loadAll() as $entity_type) {
      // The function eck__entity_type__schema returns a schema for that entity type 
      // given and entity_type object.
      $schema["eck_".$entity_type->getName()] = $entity_type->getSchema();
      
    }
  }
}

function eck_eck_property_types(){
  $property_types = array();
  
  $property_types['decimal'] = array(
    'label' => t("Decimal"),
    'class' => "ECK\PropertyTypes\Decimal"    
  );
  $property_types['integer'] = array(
    'label' => t("Integer"),
    'class' => "ECK\PropertyTypes\Integer"    
  );
  $property_types['text'] = array(
    'label' => t("Text"),
    'class' => "ECK\PropertyTypes\Text"    
  );
  $property_types['fixed_size_text'] = array(
    'label' => t("Fixed Size Text"),
    'class' => "ECK\PropertyTypes\FixedSizeText"    
  );
  $property_types['long_text'] = array(
    'label' => t("Long Text"),
    'class' => "ECK\PropertyTypes\LongText"    
  );
  $property_types['blob'] = array(
    'label' => t("Blob"),
    'class' => "ECK\PropertyTypes\Blob"    
  );
  $property_types['datetime'] = array(
    'label' => t("Date/Time"),
    'class' => "ECK\PropertyTypes\Datetime"    
  );
  
  $property_types['language'] = array(
    'label' => t("Language"),
    'class' => "ECK\PropertyTypes\Language"    
  );
  $property_types['uuid'] = array(
    'label' => t("UUID"),
    'class' => "ECK\PropertyTypes\UUID"    
  );
  $property_types['positive_integer'] = array(
    'label' => t("Positive Integer"),
    'class' => "ECK\PropertyTypes\PositiveInteger"    
  );
  
  return $property_types;
}

/**
 * Returns information about property widgets from hook_eck_property_widget_info().
 *
 * @param $widget_type
 *   (optional) A widget type name. If omitted, all widget types will be
 *   returned.
 * 
 * @param $reset
 *   Forces rebuild of the property widget cache.
 *
 * @return
 *   Either a single widget type description, as provided by
 *   hook_eck_property_widget_info(), or an array of all existing widget types, keyed
 *   by widget type name.
 */
function eck_get_widget_info($widget_type = NULL) {
  return eck_master_info_hook('eck_widget_info', $widget_type);
}

function eck_get_formatter_info($formatter_type = NULL) {
  return eck_master_info_hook('eck_formatter_info', $formatter_type);
}

/**
 * Implementation of hook_eck_property_widget_info().
 * 
 * Defines some default property widgets that come with ECK.
 * 
 * @see eck_property_info_widget_types().
 **/
function eck_eck_widget_info() {
  $widget_types = array(
    'text' => array(
      'class' => 'ECK\UI\Widgets\Text'
    ),
    'options' => array(
      'class' => 'ECK\UI\Widgets\Options'
    ),
    'language_toggle' => array(
      'class' => 'ECK\UI\Widgets\LanguageToggle'
    ),
  );
  
  return $widget_types;
}

function eck_eck_formatter_info() {
  $widget_types = array(
    'html_tag_wrapper' => array(
      'class' => 'ECK\UI\Formatters\HTMLTagWrapper'
    )
  );
  
  return $widget_types;
}

function _eck_form_property_value($state, $property){
  if(array_key_exists($property, $state['values'])){
    return $state['values'][$property];
  }
  return NULL;
}

function eck_master_info_hook($hook_name, $id = NULL){
  $info = module_invoke_all($hook_name);
  if($id){
    if(array_key_exists($id, $info)){
      return $info[$id];
    }else{
      return NULL;
    }
  }else{
    return $info;
  }
}

function eck_get_object_type_info($object_type = NULL){
  return eck_master_info_hook("eck_object_type_info", $object_type);
}

function eck_eck_object_type_info(){
  $info['entity_type']['class'] = "\ECK\Core\EntityType";
  
  $info['property']['class'] = "\ECK\Core\EntityProperty";
  $info['property']['dependencies'] = array('entity_type');
  
  $info['widget']['class'] = "\ECK\Core\PropertyWidget";
  $info['widget']['dependencies'] = array('property');
  
  $info['formatter']['class'] = "\ECK\Core\PropertyFormatter";
  $info['formatter']['dependencies'] = array('property');
  
  $info['entity']['class'] = "\ECK\Core\EEntity";
  $info['entity']['dependencies'] = array('entity_type');
  return $info;
}

function eck_get_web_ui_menu_cluster_info($cluster = NULL){
  return eck_master_info_hook('eck_web_ui_menu_cluster_info', $cluster);
}

function eck_eck_web_ui_menu_cluster_info(){
  $clusters = array();
  $clusters['entity_type_admin'] = 
  array(
    'base_path' => 'admin/structure/entity-type',
    'object_type' => 'entity_type',
    'operations' => 
    array(
      0 => array('operation' => 'listing','alias' => 'list', 'title' => "Entity types", 'description' => "Entity types administration"),
      1 => array('operation' => 'create', 'alias' => 'add') , 
      2 => array('operation' => 'update', 'alias' => 'edit'),
      3 => array('operation' => 'delete'),
    )
  );
  
  $clusters['property_admin'] = 
  array(
    'base_path' => 'admin/structure/entity-type/%eckentitytype/property',
    'object_type' => 'property',
    'operations' => 
    array(
      0 => array('operation' => 'listing','alias' => 'list'),
      1 => array('operation' => 'create', 'alias' => 'add') , 
      2 => array('operation' => 'update', 'alias' => 'edit'),
      3 => array('operation' => 'delete'),
    )
  );
  
  $clusters['widget_admin'] = 
  array(
    'base_path' => 'admin/structure/entity-type/%eckentitytype/property/%eckproperty/widget',
    'object_type' => 'widget',
    'operations' => 
    array(
      0 => array('operation' => 'create', 'alias' => 'add')
    )
  );
  
  $clusters['formatter_admin'] = 
  array(
    'base_path' => 'admin/structure/entity-type/%eckentitytype/property/%eckproperty/formatter',
    'object_type' => 'formatter',
    'operations' => 
    array(
      0 => array('operation' => 'create', 'alias' => 'add')
    )
  );
  
  $clusters['entity_admin'] = 
  array(
    'base_path' => 'admin/structure/entity-type/%eckentitytype/entity',
    'object_type' => 'entity',
    'operations' => 
    array(
      0 => array('operation' => 'listing','alias' => 'list'),
      1 => array('operation' => 'create', 'alias' => 'add') , 
      2 => array('operation' => 'read', 'alias' => 'view'),
      3 => array('operation' => 'update', 'alias' => 'edit'),
      4 => array('operation' => 'delete'),
    )
  );
  
  $clusters['entity_front'] = 
  array(
    'base_path' => 'entity',
    'object_type' => 'entity',
    'operations' => 
    array( 
      0 => array('operation' => 'update', 'alias' => 'edit'),
      1 => array('operation' => 'delete')
    )
  );
  
  return $clusters;
}

function eck_get_operation_info($operation = NULL){
  return eck_master_info_hook('eck_operation_info', $operation);
}

function eck_eck_operation_info(){
  $info['listing']['class'] = "\ECK\Operations\Listing";
  $info['create']['class'] = "\ECK\Operations\Create";
  $info['read']['class'] = "\ECK\Operations\Read";
  $info['update']['class'] = "\ECK\Operations\Update";
  $info['delete']['class'] = "\ECK\Operations\Delete";
  
  $info['listing']['type'] = "class";
  $info['create']['type'] = "class";
  $info['read']['type'] = "instance";
  $info['update']['type'] = "instance";
  $info['delete']['type'] = "instance";
  
  $info['create']['entity_type']['requirements'] = array('name');
  $info['create']['property']['requirements'] = array('name', 'type');
  $info['create']['widget']['requirements'] = array('type');
  $info['create']['formatter']['requirements'] = array('type');
  $info['create']['entity']['requirements'] = "getRequirements";
  
  $info['update']['entity_type']['requirements'] = array('name', 'label');
  $info['update']['property']['requirements'] = array('label');
  $info['update']['entity']['requirements'] = "getRequirements";
  
  $info['delete']['entity_type']['requirements'] = array();
  $info['delete']['property']['requirements'] = array();
  $info['delete']['entity']['requirements'] = array();
  
  return $info;
}

function eck_master_form($form, &$state, \ECK\UI\Widgets\FormBuilder $fb, 
        \ECK\Core\System $system){
  $form['form_builder'] =
  array(
    '#type' => 'value',
    '#value' => $fb
  );
  
  $form['system'] =
  array(
    '#type' => 'value',
    '#value' => $system
  );
  
  $form = $fb->build($form);
  
  return $form;
}

function eck_master_form_submit($form, &$state){
  $system = $state['values']['system'];
  $fb = $state['values']['form_builder'];
  $fb->update($state['values']);
  $values = (array)$fb->getObject();
  foreach($values as $key => $value){
    $system->addUserInput($value, $key);
  }
  $system->performOperation();
}

function eck_master_confirm_form($form, &$state, \ECK\Core\System $system){
  $form['system'] =
  array(
    '#type' => 'value',
    '#value' => $system
  );
  $form = confirm_form($form, "Do you really?", "/");
  return $form;
}

function eck_master_confirm_form_submit($form, &$state){
  $system = $state['values']['system'];
  $state['redirect'] = "/";
  $system->performOperation();
}

function eck_labelize($string){
  $string = str_replace("-", " ",$string);
  $string = str_replace("_", " ",$string);
  $string = ucfirst($string);
  
  return $string;
}

/**
   * Translates a camel case string into a string with underscores (e.g. firstName -&gt; first_name)
   * @param    string   $str    String in camel case format
   * @return    string            $str Translated into underscore format
   */
  function eck_from_camel_case($str) {
    $str[0] = strtolower($str[0]);
    $func = create_function('$c', 'return "_" . strtolower($c[1]);');
    return preg_replace_callback('/([A-Z])/', $func, $str);
  }
 
  /**
   * Translates a string with underscores into camel case (e.g. first_name -&gt; firstName)
   * @param    string   $str                     String in underscore format
   * @param    bool     $capitalise_first_char   If true, capitalise the first char in $str
   * @return   string                              $str translated into camel caps
   */
  function eck_to_camel_case($str, $capitalise_first_char = false) {
    if($capitalise_first_char) {
      $str[0] = strtoupper($str[0]);
    }
    $func = create_function('$c', 'return strtoupper($c[1]);');
    return preg_replace_callback('/_([a-z])/', $func, $str);
  }
  
  // PERMISSIONS
  
  /**
 * Default access callback for ECK entities.
 *
 * This is used as the default behavior when entity_access() is called to check
 * access on an entity provided by ECK. Note that in addition to calls from
 * within this own module, entity_access() is also called by other modules such
 * as Rules, Entity Reference, etc. (although it is not consistently called
 * throughout Drupal).
 *
 * @param $action
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $entity
 *   An entity to check access for. If this is NULL, we are checking
 *   access for all entities of the given type. If this is a string
 *   (representing the bundle to check access for; see parallel example in
 *   node_access()) we are checking access for all entities of the given type
 *   and bundle.
 * @param $account
 *   The user to check access for. If this is NULL, access will be checked for
 *   the current user.
 * @param $entity_type_name
 *   A string representing the type of entity to check access for.
 *
 * @return
 *   TRUE if access is granted, FALSE otherwise.
 *
 * @see entity_access()
 */
function eck_entity_access($op, $entity, $account, $entity_type_name) {
  return eck_access($op, 'entity', $entity, $account);
}

function eck_access($op, $object_type, $object = NULL, $account = NULL){
  $allow = FALSE;
  
  if(!$account){
    global $user;
    $account = $user;
  }
  
  $access = module_invoke_all('eck_access', $op, $object_type, $object, $account);
  
  if(!empty($access)){
    foreach($access as $ac){
      $allow = $allow || $ac;
    }
  }
  
  return $allow;
}

function eck_eck_access($op, $object_type, $object, $account){
  
  $master = "eck * {$object_type}";
  $perm = "eck {$op} {$object_type}";

  $allow = user_access($perm, $account) || user_access($master, $account);
  return array($allow);
  
}

function eck_permission_label($string){
  $label = str_replace("eck", "", $string);
  $label = str_replace("_", " ", $label);
  $label= trim($label);
  $label = ucfirst($label);
  
  return $label;
}

/**
 * Implements hook_permission().
 *
 * A pretty through set of permission
 * you can set permissiona at each level: entity_type, bundle, entity
 * and for each action of the CRUD
 */
function eck_permission() {
  $perms = array();
  
  $operation_info = eck_get_operation_info();
  $operations = array_keys($operation_info);
  
  $object_type_info = eck_get_object_type_info();
  $object_types = array_keys($object_type_info);
  
  foreach($object_types as $object_type){
    foreach($operations as $operation){
      $perm = "eck {$operation} {$object_type}";
      $perms[$perm] = array("title" => eck_permission_label($perm));
    }
  }
  
  //Permissions
  $perms['manage eck permissions'] =  array('title' => "Manage ECK permissions");
  
  return $perms;
}
